[{"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\index.js":"1","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\App.js":"2","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\reportWebVitals.js":"3","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\Inbox.js":"4","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\ProtectedRoute.js":"5","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\profile.js":"6","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\MainEmailPage\\EmailViewer.js":"7","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\MainEmailPage\\EmailList.js":"8","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\MainEmailPage\\EmailDetail.js":"9","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\LoginAndSignup\\LoginPage.js":"10","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\LoginAndSignup\\SignupPage.js":"11"},{"size":535,"mtime":1681937673979,"results":"12","hashOfConfig":"13"},{"size":760,"mtime":1691284766349,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1681937674123,"results":"15","hashOfConfig":"13"},{"size":0,"mtime":1685911506491,"results":"16","hashOfConfig":"17"},{"size":920,"mtime":1687575318818,"results":"18","hashOfConfig":"13"},{"size":1838,"mtime":1690845092264,"results":"19","hashOfConfig":"13"},{"size":12847,"mtime":1691278920046,"results":"20","hashOfConfig":"13"},{"size":2184,"mtime":1687231948359,"results":"21","hashOfConfig":"13"},{"size":826,"mtime":1691276730177,"results":"22","hashOfConfig":"13"},{"size":2023,"mtime":1690844946472,"results":"23","hashOfConfig":"13"},{"size":1733,"mtime":1690847150065,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9p6848",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1771wr9",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\index.js",[],[],"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\App.js",[],[],"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\reportWebVitals.js",[],[],"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\Inbox.js",[],[],[],"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\ProtectedRoute.js",[],[],"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\profile.js",["61"],[],"import React, { useState, useEffect } from 'react';\r\n\r\nconst Profile = () => {\r\n  const [user, setUser] = useState(null);\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const token = localStorage.getItem('jwt');\r\n  \r\n  useEffect(() => {\r\n    fetchUserProfile();\r\n  }, []);\r\n\r\n  const fetchUserProfile = () => {\r\n    fetch(`https://serve.siemlessemail.com/profile`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => setUser(data))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  const handleEmailAndPasswordChange = (event) => {\r\n    event.preventDefault();\r\n\r\n    fetch(`https://serve.siemlessemail.com/email_add`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email, password }),\r\n    })\r\n      .then(response => response.json())\r\n      .then(() => {\r\n        setEmail('');\r\n        setPassword('');\r\n        fetchUserProfile();\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  if (!user) return 'Loading...';\r\n\r\n  return (\r\n    <div>\r\n      <h1>{user.username}'s Profile</h1>\r\n      <p>Email: {user.email}</p>\r\n      {/* render other user info here */}\r\n      <form onSubmit={handleEmailAndPasswordChange}>\r\n        <label>\r\n          Add a new email address:\r\n          <input type=\"email\" value={email} onChange={e => setEmail(e.target.value)} required />\r\n        </label>\r\n        <label>\r\n          <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} required />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\MainEmailPage\\EmailViewer.js",["62","63","64","65","66","67","68","69","70"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FaUserCircle, FaRegTrashAlt, FaEnvelopeOpenText, FaRedo } from 'react-icons/fa';\r\nimport EmailDetail from './EmailDetail';\r\nimport EmailList from './EmailList';\r\nimport './EmailViewer.css';\r\n\r\n// Defining a mapping for classification values and rating values\r\nconst COLOR_VALUES = {\r\n  Spam: '#000000',\r\n  Marketing: '#28a745',\r\n  Events: '#ffc107',\r\n  Delivery: 'cyan',\r\n  Analytics: 'grey',\r\n  Business: 'blue',\r\n  Invoice: '#20c997',\r\n  Urgent: 'red',\r\n};\r\nconst CLASSIFICATION_VALUES = {\r\n  Spam: 29,\r\n  Marketing: 31,\r\n  Events: 37,\r\n  Delivery: 41,\r\n  Analytics: 43,\r\n  Business: 47,\r\n  Invoice: 53,\r\n  Urgent: 59,\r\n};\r\n\r\nconst RATING_VALUES = {\r\n  1: 2,\r\n  2: 3,\r\n  3: 5,\r\n  4: 7,\r\n  5: 11,\r\n  6: 13,\r\n  7: 17,\r\n  8: 19,\r\n  9: 23,\r\n};\r\nconst categories = ['spam', 'marketing', 'events', 'delivery', 'analytics', 'business', 'invoice', 'urgent'];\r\n\r\n\r\n// This function grabs the jwt token from storage and sends it to the refresh emails endpoint\r\nconst refreshEmails = async () => {\r\n  const token = localStorage.getItem('jwt');\r\n  try {\r\n    const response = await fetch('https://serve.siemlessemail.com/api/refresh-emails', {\r\n      method: 'GET', \r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to refresh emails.');\r\n    }\r\n\r\n    alert('Emails refreshed successfully.');\r\n  } catch (error) {\r\n    alert('Failed to refresh emails.');\r\n  }\r\n};\r\n\r\n\r\n// The main functional component\r\nconst EmailViewer = () => {\r\n  const [selectedType, setSelectedType] = useState('');\r\n  const [currentCategory, setCurrentCategory] = useState('Bot Sorted');\r\n  const [currentEmail, setCurrentEmail] = useState(null);\r\n  const [humanSortedEmails, setHumanSortedEmails] = useState([]);\r\n  const [userUnsortedEmails, setUserUnsortedEmails] = useState([]);\r\n  const [humanSortedIndex, setHumanSortedIndex] = useState(0);\r\n  const [unsortedIndex, setUnsortedIndex] = useState(0);\r\n  const [rating, setRating] = useState('');\r\n  const [classification, setClassification] = useState('');\r\n  const [botSortedEmails, setBotSortedEmails] = useState([]);\r\n  const [botSortedIndex, setBotSortedIndex] = useState(0);\r\n  const [emailDetailViewOpen, setEmailDetailViewOpen] = useState(false);\r\n  const [currentDetailViewEmail, setCurrentDetailViewEmail] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n\r\n  // This function checks the current email and opens it in the emailDetailView\r\n  const openEmailDetailView = (email) => {\r\n    // Find the index of the selected email\r\n    const index = userUnsortedEmails.findIndex((e) => e._id === email._id);\r\n    \r\n    // Set the unsortedIndex to the selected email's index\r\n    if (index !== -1) setUnsortedIndex(index);\r\n    \r\n    setCurrentEmail(email);\r\n    setCurrentDetailViewEmail(email);\r\n    setEmailDetailViewOpen(true);\r\n  };\r\n\r\n  const closeEmailDetailView = () => {\r\n    setEmailDetailViewOpen(false);\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  // Function for deleting an email\r\n  \r\n  const deleteEmail = async () => {\r\n    const email_id = {\r\n      ...currentDetailViewEmail,\r\n      _id: currentDetailViewEmail._id.$oid,\r\n    };\r\n  \r\n    try {\r\n      // Get JWT token from local storage\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        throw new Error('No token found in local storage.');\r\n      }\r\n  \r\n      // Send token to the authentication server and get the username\r\n      let usernameResponse = await fetch('https://serve.siemlessemail.com/api/v1/auth-check', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`,\r\n        },\r\n      });\r\n  \r\n      if (!usernameResponse.ok) {\r\n        throw new Error('Failed to get username from auth server.');\r\n      }\r\n  \r\n      let { username } = await usernameResponse.json();\r\n  \r\n      // Delete the email using the fetched username\r\n      const response = await fetch(`https://serve.siemlessemail.com/api/${username}/delete-email`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email: email_id }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Failed to delete email.');\r\n      }\r\n  \r\n      setUserUnsortedEmails((prevState) => prevState.filter((e) => e._id !== currentDetailViewEmail._id));\r\n  \r\n      alert('Email deleted successfully.');\r\n    } catch (error) {\r\n      alert(`Failed to delete email. Error: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // This function looks at the emails during the import and adds them to their respective category\r\n  const groupEmailsByCompletion = (emails) => {\r\n    let emailGroups = {};\r\n  \r\n    emails.forEach(email => {\r\n      if (categories.includes(email.category)) {\r\n        if (!emailGroups[email.category]) {\r\n          emailGroups[email.category] = [];\r\n        }\r\n    \r\n        emailGroups[email.category].push(email);\r\n      }\r\n    });\r\n    \r\n    return emailGroups;\r\n  };\r\n\r\n\r\n  // Function for loading emails on component mount\r\n  useEffect(() => {\r\n    \r\n  \r\n    \r\n    // This function sends the jwt token to the get-emails endpoint and recieves the emails\r\n    async function loadEmails() {\r\n      try {\r\n        const token = localStorage.getItem('jwt');  \r\n      const response = await fetch('https://serve.siemlessemail.com/api/get-emails', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      const data = await response.json();\r\n\r\n        // console.log(data)\r\n        setHumanSortedEmails(data.user_sorted_emails);\r\n        setUserUnsortedEmails(data.user_unsorted_emails);\r\n        setBotSortedEmails(data.bot_sorted_emails);\r\n        const groupedEmails = groupEmailsByCompletion(data.bot_sorted_emails);\r\n\r\n        //setLoading(false)\r\n      } catch (error) {\r\n        console.error('Error loading emails:', error);\r\n      }\r\n    }\r\n\r\n    setIsLoading(true);\r\n    loadEmails()\r\n      .then((data) => {\r\n        setHumanSortedEmails(data.user_sorted_emails);\r\n        setUserUnsortedEmails(data.user_unsorted_emails);\r\n        setBotSortedEmails(data.bot_sorted_emails);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error loading emails:', error);\r\n        setError('Error loading emails.');\r\n        setIsLoading(false);\r\n      });\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  // This function passes the jwt token and current email then sends them to the move-email endpoint\r\n  const updateEmail = async () => {\r\n    const token = localStorage.getItem('jwt');\r\n    // Validation for rating and classification inputs\r\n    if (!rating || !classification) {\r\n      alert('Please enter a rating and classification.');\r\n      return;\r\n    }\r\n    \r\n    const classificationValue = CLASSIFICATION_VALUES[classification];\r\n    if (!classificationValue) {\r\n      alert('Invalid classification.');\r\n      return;\r\n    }\r\n\r\n    const ratingValue = RATING_VALUES[rating];\r\n    if (!ratingValue) {\r\n      alert('Invalid Rating.');\r\n      return;\r\n    }\r\n\r\n    \r\n    let completionValue = ratingValue * classificationValue;\r\n    const updatedEmail = {\r\n      ...currentDetailViewEmail,\r\n      completion: completionValue,\r\n      _id: currentDetailViewEmail._id.$oid,\r\n    };\r\n  \r\n\r\n    try {\r\n      console.log({email: updatedEmail})\r\n      const response = await fetch('https://serve.siemlessemail.com/api/move-email', {\r\n      method: 'POST',\r\n      \r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`\r\n      },\r\n        body: JSON.stringify({ email: updatedEmail }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Failed to move email.');\r\n      }\r\n  \r\n      setUserUnsortedEmails((prevState) => prevState.filter((e) => e._id !== currentDetailViewEmail._id));\r\n      \r\n  \r\n      // Reset rating and classification inputs\r\n      setRating('');\r\n      setClassification('');\r\n  \r\n      alert('Email moved successfully.');\r\n    } catch (error) {\r\n      alert('Failed to move email.');\r\n    }\r\n  };\r\n\r\n\r\n  // This function sends the jwt token to the resort-emails endpoint \r\n  const resortEmails = async () => {\r\n    try {\r\n      const token = localStorage.getItem('jwt');\r\n    \r\n      const response = await fetch('https://serve.siemlessemail.com/api/resort-emails', {\r\n        method: 'GET', // or 'POST'\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}` \r\n        }\r\n      });\r\n    \r\n      if (!response.ok) {\r\n        throw new Error('Failed to resort emails.');\r\n      }\r\n    \r\n      alert('Emails resorted successfully.');\r\n    } catch (error) {\r\n      alert('Failed to resort emails.');\r\n    }\r\n    \r\n  };\r\n\r\n  const getCurrentEmails = () => {\r\n    switch (currentCategory) {\r\n      case 'Unsorted':\r\n        return userUnsortedEmails;\r\n      case 'Human Sorted':\r\n        return humanSortedEmails;\r\n      case 'Bot Sorted':\r\n        return botSortedEmails;\r\n      case 'spam':\r\n      case 'marketing':\r\n      case 'events':\r\n      case 'delivery':\r\n      case 'analytics':\r\n      case 'business':\r\n      case 'invoice':\r\n      case 'urgent':\r\n      case 'rating_error':\r\n        // If the current category is any of these, return emails from all lists that match the category\r\n        return [...userUnsortedEmails, ...humanSortedEmails, ...botSortedEmails].filter(email => \r\n          email && \r\n          email.category && \r\n          email.category.toLowerCase() === currentCategory.toLowerCase()\r\n        );\r\n      default:\r\n        return [];\r\n    }\r\n  };\r\n\r\n\r\n  // Component render\r\n  return (\r\n    <div className=\"email-viewer-container\" style={{display: 'flex'}}>\r\n  {isLoading ? <p>Loading...</p> : null}\r\n\r\n  {/* email sidebar */}\r\n  <div className=\"email-sidebar\" style={{width: '300px'}}>\r\n  <h3>Siemless emails</h3>\r\n  <button onClick={resortEmails}>\r\n  <FaRedo /> \r\n</button>\r\n<button onClick={refreshEmails}>\r\n      <FaEnvelopeOpenText /> \r\n    </button>\r\n    \r\n    \r\n    <ul>\r\n      <li onClick={() => setCurrentCategory('Human Sorted')}>Human Sorted</li>\r\n      <li onClick={() => setCurrentCategory('Bot Sorted')}>Emails</li>\r\n      <div className=\"color-key\">\r\n      <h3>Categories</h3>\r\n      <ul>\r\n      {Object.keys(COLOR_VALUES).map((key) => (\r\n  <li key={key} style={{color: COLOR_VALUES[key]}} onClick={() => setCurrentCategory(key.toLowerCase())}>\r\n    {key}\r\n  </li>\r\n))}\r\n    </ul>\r\n    </div>\r\n    </ul>\r\n    <Link to=\"/profile\" className=\"profile-icon\">\r\n    <FaUserCircle size={30} />\r\n  </Link>\r\n  </div>\r\n\r\n  {/* Main content */}\r\n  <div className=\"email-main-content\" style={{flexGrow: 1}}>\r\n    {emailDetailViewOpen ? (\r\n      <>\r\n        <h2>Selected Email</h2>\r\n        <EmailDetail email={currentDetailViewEmail} onClose={closeEmailDetailView} />\r\n\r\n              {/* Rating and Classification inputs */}\r\n        <div>\r\n          <label htmlFor=\"Rating\">Rating: </label>\r\n          <select\r\n            id=\"Rating\"\r\n            value={rating}\r\n            onChange={(e) => setRating(e.target.value)}\r\n          >\r\n            <option value=\"\">Select a Rating</option>\r\n            {Object.keys(RATING_VALUES).map((key) => (\r\n              <option key={key} value={key}>\r\n                {key}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"classification\">Classification: </label>\r\n          <select\r\n            id=\"classification\"\r\n            value={classification}\r\n            onChange={(e) => setClassification(e.target.value)}\r\n          >\r\n            <option value=\"\">Select a classification</option>\r\n            {Object.keys(CLASSIFICATION_VALUES).map((key) => (\r\n              <option key={key} value={key}>\r\n                {key}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n              {/* Submit and Delete buttons */}\r\n        <div className=\"email-action-buttons\">\r\n          <button\r\n            onClick={() => updateEmail(getCurrentEmails()[unsortedIndex])}\r\n            disabled={!rating || !classification}\r\n          >\r\n            Submit and Move Email\r\n          </button>\r\n          <button\r\n            onClick={() => deleteEmail(getCurrentEmails()[unsortedIndex])}\r\n          >\r\n            <FaRegTrashAlt /> Delete Email\r\n          </button>\r\n        </div>\r\n      </>\r\n    ) : (\r\n      <>\r\n        <h3>{currentCategory} Emails</h3>\r\n        <EmailList emails={getCurrentEmails()} setCurrentEmail={openEmailDetailView} />\r\n      </>\r\n    )}\r\n\r\n\r\n  </div>\r\n</div>\r\n);\r\n  \r\n  };\r\n  export default EmailViewer;\r\n","C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\MainEmailPage\\EmailList.js",[],[],"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\MainEmailPage\\EmailDetail.js",[],[],"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\LoginAndSignup\\LoginPage.js",[],[],"C:\\Users\\casey\\PycharmProjects\\email_sort\\front-end\\email-review\\src\\LoginAndSignup\\SignupPage.js",[],[],{"ruleId":"71","severity":1,"message":"72","line":11,"column":6,"nodeType":"73","endLine":11,"endColumn":8,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":69,"column":10,"nodeType":"77","messageId":"78","endLine":69,"endColumn":22},{"ruleId":"75","severity":1,"message":"79","line":69,"column":24,"nodeType":"77","messageId":"78","endLine":69,"endColumn":39},{"ruleId":"75","severity":1,"message":"80","line":71,"column":10,"nodeType":"77","messageId":"78","endLine":71,"endColumn":22},{"ruleId":"75","severity":1,"message":"81","line":74,"column":10,"nodeType":"77","messageId":"78","endLine":74,"endColumn":26},{"ruleId":"75","severity":1,"message":"82","line":74,"column":28,"nodeType":"77","messageId":"78","endLine":74,"endColumn":47},{"ruleId":"75","severity":1,"message":"83","line":79,"column":10,"nodeType":"77","messageId":"78","endLine":79,"endColumn":24},{"ruleId":"75","severity":1,"message":"84","line":79,"column":26,"nodeType":"77","messageId":"78","endLine":79,"endColumn":43},{"ruleId":"75","severity":1,"message":"85","line":83,"column":10,"nodeType":"77","messageId":"78","endLine":83,"endColumn":15},{"ruleId":"75","severity":1,"message":"86","line":193,"column":15,"nodeType":"77","messageId":"78","endLine":193,"endColumn":28},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchUserProfile'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-unused-vars","'selectedType' is assigned a value but never used.","Identifier","unusedVar","'setSelectedType' is assigned a value but never used.","'currentEmail' is assigned a value but never used.","'humanSortedIndex' is assigned a value but never used.","'setHumanSortedIndex' is assigned a value but never used.","'botSortedIndex' is assigned a value but never used.","'setBotSortedIndex' is assigned a value but never used.","'error' is assigned a value but never used.","'groupedEmails' is assigned a value but never used.",{"desc":"88","fix":"89"},"Update the dependencies array to be: [fetchUserProfile]",{"range":"90","text":"91"},[316,318],"[fetchUserProfile]"]